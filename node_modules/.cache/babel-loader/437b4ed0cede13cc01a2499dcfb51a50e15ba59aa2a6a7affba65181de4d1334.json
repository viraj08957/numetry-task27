{"ast":null,"code":"import axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;\n\n//* Make API Requests\n\n/** To get username from Token */\nexport async function getUsername() {\n  const token = localStorage.getItem(\"token\");\n  if (!token) return Promise.reject(\"Cannot find Token\");\n  let decode = jwt_decode(token);\n  return decode;\n}\n\n// authenticate a user\nexport async function authenticate(username) {\n  try {\n    const {\n      status\n    } = await axios.post(\"/api/authenticate\", {\n      username\n    });\n    return status;\n  } catch (error) {\n    return {\n      error: \"Username does not exist\"\n    };\n  }\n}\n\n// get user details\nexport async function getUser(username) {\n  try {\n    const {\n      data\n    } = await axios.get(`/api/user/${username}`);\n    return data;\n  } catch (error) {\n    return {\n      error: \"Password does'nt match\"\n    };\n  }\n}\n\n// Register user function\nexport async function registerUser(credentials) {\n  try {\n    const {\n      data: {\n        msg\n      },\n      status\n    } = await axios.post(`/api/register`, credentials);\n    let {\n      username,\n      email: userEmail\n    } = credentials;\n\n    // send email if user registered successfully\n    if (status === 201) {\n      await axios.post(\"/api/registerMail\", {\n        username,\n        userEmail,\n        text: msg\n      });\n    }\n    return Promise.resolve(msg);\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\n\n// login function\n\nexport async function verifyPassword(_ref) {\n  let {\n    username,\n    password\n  } = _ref;\n  try {\n    if (username) {\n      const {\n        data\n      } = await axios.post(\"/api/login\", {\n        username,\n        password\n      });\n      return Promise.resolve({\n        data\n      });\n    }\n  } catch (error) {\n    return Promise.reject({\n      error: \"Password does not match\"\n    });\n  }\n}\n\n// update user profile function\n\nexport async function updateUser(response) {\n  try {\n    const token = await localStorage.getItem(\"token\");\n    const data = await axios.put(\"/api/update-user\", response, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return Promise.resolve({\n      data\n    });\n  } catch (error) {\n    return Promise.reject({\n      error: \"Couldn't update profile \"\n    });\n  }\n}\n\n// generate OTP\nexport async function generateOTP(username) {\n  try {\n    const {\n      data: {\n        code\n      },\n      status\n    } = await axios.get(\"/api/generateOTP\", {\n      params: {\n        username\n      }\n    });\n    console.log(\"code : \", code);\n    // send mail with otp code\n    if (status === 201) {\n      let {\n        user: {\n          email\n        }\n      } = await getUser(username);\n      let text = `Your OTP : ${code}\\nVerify and recover your Password`;\n      console.log(\"user email : \", email);\n      await axios.post(\"/api/registerMail/\", {\n        username,\n        userEmail: email,\n        text\n      });\n    }\n    return Promise.resolve(code);\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\n\n// verify otp\nexport async function verifyOTP(_ref2) {\n  let {\n    username,\n    code\n  } = _ref2;\n  try {\n    const {\n      data,\n      status\n    } = await axios.get(`/api/verifyOTP`, {\n      params: {\n        username,\n        code\n      }\n    });\n    return {\n      data,\n      status\n    };\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\nexport async function resetPassword(_ref3) {\n  let {\n    username,\n    password\n  } = _ref3;\n  try {\n    const {\n      data,\n      status\n    } = await axios.put(\"/api/reset-password\", {\n      username,\n      password\n    });\n    return Promise.resolve({\n      data,\n      status\n    });\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}","map":{"version":3,"names":["axios","jwt_decode","defaults","baseURL","process","env","REACT_APP_SERVER_DOMAIN","getUsername","token","localStorage","getItem","Promise","reject","decode","authenticate","username","status","post","error","getUser","data","get","registerUser","credentials","msg","email","userEmail","text","resolve","verifyPassword","password","updateUser","response","put","headers","Authorization","generateOTP","code","params","console","log","user","verifyOTP","resetPassword"],"sources":["C:/Users/Viraj/Desktop/task 27/login-register-mern/client/src/helper/helper.js"],"sourcesContent":["import axios from \"axios\"\r\nimport jwt_decode from \"jwt-decode\"\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN\r\n\r\n//* Make API Requests\r\n\r\n/** To get username from Token */\r\nexport async function getUsername() {\r\n  const token = localStorage.getItem(\"token\")\r\n  if (!token) return Promise.reject(\"Cannot find Token\")\r\n  let decode = jwt_decode(token)\r\n  return decode\r\n}\r\n\r\n// authenticate a user\r\nexport async function authenticate(username) {\r\n  try {\r\n    const { status } = await axios.post(\"/api/authenticate\", { username })\r\n    return status\r\n  } catch (error) {\r\n    return { error: \"Username does not exist\" }\r\n  }\r\n}\r\n\r\n// get user details\r\nexport async function getUser(username) {\r\n  try {\r\n    const { data } = await axios.get(`/api/user/${username}`)\r\n    return data\r\n  } catch (error) {\r\n    return { error: \"Password does'nt match\" }\r\n  }\r\n}\r\n\r\n// Register user function\r\nexport async function registerUser(credentials) {\r\n  try {\r\n    const {\r\n      data: { msg },\r\n      status,\r\n    } = await axios.post(`/api/register`, credentials)\r\n\r\n    let { username, email: userEmail } = credentials\r\n\r\n    // send email if user registered successfully\r\n    if (status === 201) {\r\n      await axios.post(\"/api/registerMail\", { username, userEmail, text: msg })\r\n    }\r\n    return Promise.resolve(msg)\r\n  } catch (error) {\r\n    return Promise.reject({ error })\r\n  }\r\n}\r\n\r\n// login function\r\n\r\nexport async function verifyPassword({ username, password }) {\r\n  try {\r\n    if (username) {\r\n      const { data } = await axios.post(\"/api/login\", { username, password })\r\n      return Promise.resolve({ data })\r\n    }\r\n  } catch (error) {\r\n    return Promise.reject({ error: \"Password does not match\" })\r\n  }\r\n}\r\n\r\n// update user profile function\r\n\r\nexport async function updateUser(response) {\r\n  try {\r\n    const token = await localStorage.getItem(\"token\")\r\n    const data = await axios.put(\"/api/update-user\", response, {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    })\r\n    return Promise.resolve({ data })\r\n  } catch (error) {\r\n    return Promise.reject({ error: \"Couldn't update profile \" })\r\n  }\r\n}\r\n\r\n// generate OTP\r\nexport async function generateOTP(username) {\r\n  try {\r\n    const {\r\n      data: { code },\r\n      status,\r\n    } = await axios.get(\"/api/generateOTP\", {\r\n      params: { username },\r\n    })\r\n    console.log(\"code : \", code)\r\n    // send mail with otp code\r\n    if (status === 201) {\r\n      let {\r\n        user: { email },\r\n      } = await getUser(username)\r\n      let text = `Your OTP : ${code}\\nVerify and recover your Password`\r\n      console.log(\"user email : \", email)\r\n      await axios.post(\"/api/registerMail/\", {\r\n        username,\r\n        userEmail: email,\r\n        text,\r\n      })\r\n    }\r\n    return Promise.resolve(code)\r\n  } catch (error) {\r\n    return Promise.reject({ error })\r\n  }\r\n}\r\n\r\n// verify otp\r\nexport async function verifyOTP({ username, code }) {\r\n  try {\r\n    const { data, status } = await axios.get(`/api/verifyOTP`, {\r\n      params: {\r\n        username,\r\n        code,\r\n      },\r\n    })\r\n    return { data, status }\r\n  } catch (error) {\r\n    return Promise.reject({ error })\r\n  }\r\n}\r\n\r\nexport async function resetPassword({ username, password }) {\r\n  try {\r\n    const { data, status } = await axios.put(\"/api/reset-password\", {\r\n      username,\r\n      password,\r\n    })\r\n    return Promise.resolve({ data, status })\r\n  } catch (error) {\r\n    return Promise.reject({ error })\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}